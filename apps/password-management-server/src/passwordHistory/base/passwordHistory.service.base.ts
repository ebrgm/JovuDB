/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PasswordHistory as PrismaPasswordHistory,
  User as PrismaUser,
} from "@prisma/client";

export class PasswordHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PasswordHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passwordHistory.count(args);
  }

  async passwordHistories(
    args: Prisma.PasswordHistoryFindManyArgs
  ): Promise<PrismaPasswordHistory[]> {
    return this.prisma.passwordHistory.findMany(args);
  }
  async passwordHistory(
    args: Prisma.PasswordHistoryFindUniqueArgs
  ): Promise<PrismaPasswordHistory | null> {
    return this.prisma.passwordHistory.findUnique(args);
  }
  async createPasswordHistory(
    args: Prisma.PasswordHistoryCreateArgs
  ): Promise<PrismaPasswordHistory> {
    return this.prisma.passwordHistory.create(args);
  }
  async updatePasswordHistory(
    args: Prisma.PasswordHistoryUpdateArgs
  ): Promise<PrismaPasswordHistory> {
    return this.prisma.passwordHistory.update(args);
  }
  async deletePasswordHistory(
    args: Prisma.PasswordHistoryDeleteArgs
  ): Promise<PrismaPasswordHistory> {
    return this.prisma.passwordHistory.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.passwordHistory
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
