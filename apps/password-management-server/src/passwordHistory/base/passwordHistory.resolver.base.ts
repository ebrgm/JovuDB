/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PasswordHistory } from "./PasswordHistory";
import { PasswordHistoryCountArgs } from "./PasswordHistoryCountArgs";
import { PasswordHistoryFindManyArgs } from "./PasswordHistoryFindManyArgs";
import { PasswordHistoryFindUniqueArgs } from "./PasswordHistoryFindUniqueArgs";
import { CreatePasswordHistoryArgs } from "./CreatePasswordHistoryArgs";
import { UpdatePasswordHistoryArgs } from "./UpdatePasswordHistoryArgs";
import { DeletePasswordHistoryArgs } from "./DeletePasswordHistoryArgs";
import { User } from "../../user/base/User";
import { PasswordHistoryService } from "../passwordHistory.service";
@graphql.Resolver(() => PasswordHistory)
export class PasswordHistoryResolverBase {
  constructor(protected readonly service: PasswordHistoryService) {}

  async _passwordHistoriesMeta(
    @graphql.Args() args: PasswordHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PasswordHistory])
  async passwordHistories(
    @graphql.Args() args: PasswordHistoryFindManyArgs
  ): Promise<PasswordHistory[]> {
    return this.service.passwordHistories(args);
  }

  @graphql.Query(() => PasswordHistory, { nullable: true })
  async passwordHistory(
    @graphql.Args() args: PasswordHistoryFindUniqueArgs
  ): Promise<PasswordHistory | null> {
    const result = await this.service.passwordHistory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PasswordHistory)
  async createPasswordHistory(
    @graphql.Args() args: CreatePasswordHistoryArgs
  ): Promise<PasswordHistory> {
    return await this.service.createPasswordHistory({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PasswordHistory)
  async updatePasswordHistory(
    @graphql.Args() args: UpdatePasswordHistoryArgs
  ): Promise<PasswordHistory | null> {
    try {
      return await this.service.updatePasswordHistory({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PasswordHistory)
  async deletePasswordHistory(
    @graphql.Args() args: DeletePasswordHistoryArgs
  ): Promise<PasswordHistory | null> {
    try {
      return await this.service.deletePasswordHistory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: PasswordHistory
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
