/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EncryptionKey } from "./EncryptionKey";
import { EncryptionKeyCountArgs } from "./EncryptionKeyCountArgs";
import { EncryptionKeyFindManyArgs } from "./EncryptionKeyFindManyArgs";
import { EncryptionKeyFindUniqueArgs } from "./EncryptionKeyFindUniqueArgs";
import { CreateEncryptionKeyArgs } from "./CreateEncryptionKeyArgs";
import { UpdateEncryptionKeyArgs } from "./UpdateEncryptionKeyArgs";
import { DeleteEncryptionKeyArgs } from "./DeleteEncryptionKeyArgs";
import { EncryptionKeyService } from "../encryptionKey.service";
@graphql.Resolver(() => EncryptionKey)
export class EncryptionKeyResolverBase {
  constructor(protected readonly service: EncryptionKeyService) {}

  async _encryptionKeysMeta(
    @graphql.Args() args: EncryptionKeyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EncryptionKey])
  async encryptionKeys(
    @graphql.Args() args: EncryptionKeyFindManyArgs
  ): Promise<EncryptionKey[]> {
    return this.service.encryptionKeys(args);
  }

  @graphql.Query(() => EncryptionKey, { nullable: true })
  async encryptionKey(
    @graphql.Args() args: EncryptionKeyFindUniqueArgs
  ): Promise<EncryptionKey | null> {
    const result = await this.service.encryptionKey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EncryptionKey)
  async createEncryptionKey(
    @graphql.Args() args: CreateEncryptionKeyArgs
  ): Promise<EncryptionKey> {
    return await this.service.createEncryptionKey({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EncryptionKey)
  async updateEncryptionKey(
    @graphql.Args() args: UpdateEncryptionKeyArgs
  ): Promise<EncryptionKey | null> {
    try {
      return await this.service.updateEncryptionKey({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EncryptionKey)
  async deleteEncryptionKey(
    @graphql.Args() args: DeleteEncryptionKeyArgs
  ): Promise<EncryptionKey | null> {
    try {
      return await this.service.deleteEncryptionKey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
