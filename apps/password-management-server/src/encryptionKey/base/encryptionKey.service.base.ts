/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EncryptionKey as PrismaEncryptionKey } from "@prisma/client";

export class EncryptionKeyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EncryptionKeyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.encryptionKey.count(args);
  }

  async encryptionKeys(
    args: Prisma.EncryptionKeyFindManyArgs
  ): Promise<PrismaEncryptionKey[]> {
    return this.prisma.encryptionKey.findMany(args);
  }
  async encryptionKey(
    args: Prisma.EncryptionKeyFindUniqueArgs
  ): Promise<PrismaEncryptionKey | null> {
    return this.prisma.encryptionKey.findUnique(args);
  }
  async createEncryptionKey(
    args: Prisma.EncryptionKeyCreateArgs
  ): Promise<PrismaEncryptionKey> {
    return this.prisma.encryptionKey.create(args);
  }
  async updateEncryptionKey(
    args: Prisma.EncryptionKeyUpdateArgs
  ): Promise<PrismaEncryptionKey> {
    return this.prisma.encryptionKey.update(args);
  }
  async deleteEncryptionKey(
    args: Prisma.EncryptionKeyDeleteArgs
  ): Promise<PrismaEncryptionKey> {
    return this.prisma.encryptionKey.delete(args);
  }
}
