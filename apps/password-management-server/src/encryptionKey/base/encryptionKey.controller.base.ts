/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EncryptionKeyService } from "../encryptionKey.service";
import { EncryptionKeyCreateInput } from "./EncryptionKeyCreateInput";
import { EncryptionKey } from "./EncryptionKey";
import { EncryptionKeyFindManyArgs } from "./EncryptionKeyFindManyArgs";
import { EncryptionKeyWhereUniqueInput } from "./EncryptionKeyWhereUniqueInput";
import { EncryptionKeyUpdateInput } from "./EncryptionKeyUpdateInput";

export class EncryptionKeyControllerBase {
  constructor(protected readonly service: EncryptionKeyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EncryptionKey })
  async createEncryptionKey(
    @common.Body() data: EncryptionKeyCreateInput
  ): Promise<EncryptionKey> {
    return await this.service.createEncryptionKey({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        active: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EncryptionKey] })
  @ApiNestedQuery(EncryptionKeyFindManyArgs)
  async encryptionKeys(
    @common.Req() request: Request
  ): Promise<EncryptionKey[]> {
    const args = plainToClass(EncryptionKeyFindManyArgs, request.query);
    return this.service.encryptionKeys({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        active: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EncryptionKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async encryptionKey(
    @common.Param() params: EncryptionKeyWhereUniqueInput
  ): Promise<EncryptionKey | null> {
    const result = await this.service.encryptionKey({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        key: true,
        active: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EncryptionKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEncryptionKey(
    @common.Param() params: EncryptionKeyWhereUniqueInput,
    @common.Body() data: EncryptionKeyUpdateInput
  ): Promise<EncryptionKey | null> {
    try {
      return await this.service.updateEncryptionKey({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          key: true,
          active: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EncryptionKey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEncryptionKey(
    @common.Param() params: EncryptionKeyWhereUniqueInput
  ): Promise<EncryptionKey | null> {
    try {
      return await this.service.deleteEncryptionKey({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          key: true,
          active: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
